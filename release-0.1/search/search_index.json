{
    "docs": [
        {
            "location": "/", 
            "text": "SubstitutionModels.jl Documentation\n\n\n#\n\n\nSubstitutionModels.NucleicAcidSubstitutionModel\n \n \nType\n.\n\n\nNucleicAcidSubstitutionModel\n is an abstract type that contains all models describing a substitution process impacting biological sequences of \nDNA\n or \nRNA\n with continous time Markov models.\n\n\nsource\n\n\n#\n\n\nSubstitutionModels.Q\n \n \nFunction\n.\n\n\nGenerate a Q matrix for a \nNucleicAcidSubstitutionModel\n, of the form:\n\n\n\n\n\nQ = \\begin{bmatrix}\nQ_{A, A} & Q_{A, C} & Q_{A, G} & Q_{A, T} \\\\\nQ_{C, A} & Q_{C, C} & Q_{C, G} & Q_{C, T} \\\\\nQ_{G, A} & Q_{G, C} & Q_{G, G} & Q_{G, T} \\\\\nQ_{T, A} & Q_{T, C} & Q_{T, G} & Q_{T, T} \\end{bmatrix}\n\n\n\n\n\nsource\n\n\n#\n\n\nSubstitutionModels.P\n \n \nFunction\n.\n\n\nGenerate a P matrix for a \nNucleicAcidSubstitutionModel\n, of the form:\n\n\n\n\n\nP = \\begin{bmatrix}\nP_{A, A} & P_{A, C} & P_{A, G} & P_{A, T} \\\\\nP_{C, A} & P_{C, C} & P_{C, G} & P_{C, T} \\\\\nP_{G, A} & P_{G, C} & P_{G, G} & P_{G, T} \\\\\nP_{T, A} & P_{T, C} & P_{T, G} & P_{T, T} \\end{bmatrix}.\n\n\n\n\n\nfor specified time\n\n\nsource\n\n\n\n\nIncluded models\n\n\nAbsolute and relative rate forms of the following popular substitution models are currently included in SubstitutionModels.jl:\n\n\n\n\nJC69\n\n\nK80\n\n\nF81\n\n\nF84\n\n\nHKY85\n\n\nTN93\n\n\nGTR\n\n\n\n\n\n\nCustom substitution models\n\n\nThe set of substitution models included in this package is easily extended with user defined types. When defining a new substitution model, the minimum requirement is that it is a subtype of \nNucleicAcidSubstitutionModel\n, and that it has a valid method for the \nQ\n function.\n\n\nThere are two means of accomplishing this. The first method involves recognizing that most substitution models are special cases of the Generalized Time Reversible (GTR) model, which has a Q matrix of the form:\n\n\n\n\n\nQ = \\begin{bmatrix}\n-(\\delta \\pi_{\\text{C}} + \\eta \\pi_{\\text{G}} + \\beta \\pi_{\\text{T}}) & \\delta \\pi_{\\text{C}} & \\eta \\pi_{\\text{G}} & \\beta \\pi_{\\text{T}} \\\\\n\\delta \\pi_{\\text{A}} & -(\\delta \\pi_{\\text{A}} + \\epsilon \\pi_{\\text{G}} + \\alpha \\pi_{\\text{T}}) & \\epsilon \\pi_{\\text{G}} & \\alpha \\pi_{\\text{T}} \\\\\n\\eta \\pi_{\\text{A}} & \\epsilon \\pi_{\\text{C}} & -(\\eta \\pi_{\\text{A}} + \\epsilon \\pi_{\\text{C}} + \\gamma \\pi_{\\text{T}}) & \\gamma \\pi_{\\text{T}} \\\\\n\\beta \\pi_{\\text{A}} & \\alpha \\pi_{\\text{C}} & \\gamma \\pi_{\\text{G}} & -(\\beta \\pi_{\\text{A}} + \\alpha \\pi_{\\text{C}} + \\gamma \\pi_{\\text{G}})\n\\end{bmatrix}.\n\n\n\n\n\nSeeing this, a substitution model can be described by defining methods for the following internal functions:\n\n\n\n\n_\u03b1\n,\n\n\n_\u03b2\n,\n\n\n_\u03b3\n,\n\n\n_\u03b4\n,\n\n\n_\u03f5\n, and\n\n\n_\u03b7\n.\n\n\n\n\nIf this substitution model allows for unequal base frequencies, methods for \n_\u03c0A\n, \n_\u03c0C\n, \n_\u03c0G\n, and \n_\u03c0T\n will also need to be defined. With these, SubstitutionModels.jl will calculate the correct Q and P matrices.\n\n\nThe second method of describing a new substitution model's Q matrix is to do so directly by defining a new method for the \nQ\n function.\n\n\n\n\nP matrix calculation for user defined substitution models\n\n\nP matrices are found as follows:\n\n\n\n\n\nP = \\text{expm} \\left(Q \\times t \\right).\n\n\n\n\n\nFor many substitution models, the P matrix has a known form. Rather than calculating an approximate P matrix using julia's \nexpm\n function, an exact method for the \nP\n function may be optionally defined. This is highly recommended when it is possible, as it typically results in substantial computational savings.", 
            "title": "Home"
        }, 
        {
            "location": "/#substitutionmodelsjl-documentation", 
            "text": "#  SubstitutionModels.NucleicAcidSubstitutionModel     Type .  NucleicAcidSubstitutionModel  is an abstract type that contains all models describing a substitution process impacting biological sequences of  DNA  or  RNA  with continous time Markov models.  source  #  SubstitutionModels.Q     Function .  Generate a Q matrix for a  NucleicAcidSubstitutionModel , of the form:   \nQ = \\begin{bmatrix}\nQ_{A, A} & Q_{A, C} & Q_{A, G} & Q_{A, T} \\\\\nQ_{C, A} & Q_{C, C} & Q_{C, G} & Q_{C, T} \\\\\nQ_{G, A} & Q_{G, C} & Q_{G, G} & Q_{G, T} \\\\\nQ_{T, A} & Q_{T, C} & Q_{T, G} & Q_{T, T} \\end{bmatrix}   source  #  SubstitutionModels.P     Function .  Generate a P matrix for a  NucleicAcidSubstitutionModel , of the form:   \nP = \\begin{bmatrix}\nP_{A, A} & P_{A, C} & P_{A, G} & P_{A, T} \\\\\nP_{C, A} & P_{C, C} & P_{C, G} & P_{C, T} \\\\\nP_{G, A} & P_{G, C} & P_{G, G} & P_{G, T} \\\\\nP_{T, A} & P_{T, C} & P_{T, G} & P_{T, T} \\end{bmatrix}.   for specified time  source", 
            "title": "SubstitutionModels.jl Documentation"
        }, 
        {
            "location": "/#included-models", 
            "text": "Absolute and relative rate forms of the following popular substitution models are currently included in SubstitutionModels.jl:   JC69  K80  F81  F84  HKY85  TN93  GTR", 
            "title": "Included models"
        }, 
        {
            "location": "/#custom-substitution-models", 
            "text": "The set of substitution models included in this package is easily extended with user defined types. When defining a new substitution model, the minimum requirement is that it is a subtype of  NucleicAcidSubstitutionModel , and that it has a valid method for the  Q  function.  There are two means of accomplishing this. The first method involves recognizing that most substitution models are special cases of the Generalized Time Reversible (GTR) model, which has a Q matrix of the form:   \nQ = \\begin{bmatrix}\n-(\\delta \\pi_{\\text{C}} + \\eta \\pi_{\\text{G}} + \\beta \\pi_{\\text{T}}) & \\delta \\pi_{\\text{C}} & \\eta \\pi_{\\text{G}} & \\beta \\pi_{\\text{T}} \\\\\n\\delta \\pi_{\\text{A}} & -(\\delta \\pi_{\\text{A}} + \\epsilon \\pi_{\\text{G}} + \\alpha \\pi_{\\text{T}}) & \\epsilon \\pi_{\\text{G}} & \\alpha \\pi_{\\text{T}} \\\\\n\\eta \\pi_{\\text{A}} & \\epsilon \\pi_{\\text{C}} & -(\\eta \\pi_{\\text{A}} + \\epsilon \\pi_{\\text{C}} + \\gamma \\pi_{\\text{T}}) & \\gamma \\pi_{\\text{T}} \\\\\n\\beta \\pi_{\\text{A}} & \\alpha \\pi_{\\text{C}} & \\gamma \\pi_{\\text{G}} & -(\\beta \\pi_{\\text{A}} + \\alpha \\pi_{\\text{C}} + \\gamma \\pi_{\\text{G}})\n\\end{bmatrix}.   Seeing this, a substitution model can be described by defining methods for the following internal functions:   _\u03b1 ,  _\u03b2 ,  _\u03b3 ,  _\u03b4 ,  _\u03f5 , and  _\u03b7 .   If this substitution model allows for unequal base frequencies, methods for  _\u03c0A ,  _\u03c0C ,  _\u03c0G , and  _\u03c0T  will also need to be defined. With these, SubstitutionModels.jl will calculate the correct Q and P matrices.  The second method of describing a new substitution model's Q matrix is to do so directly by defining a new method for the  Q  function.", 
            "title": "Custom substitution models"
        }, 
        {
            "location": "/#p-matrix-calculation-for-user-defined-substitution-models", 
            "text": "P matrices are found as follows:   \nP = \\text{expm} \\left(Q \\times t \\right).   For many substitution models, the P matrix has a known form. Rather than calculating an approximate P matrix using julia's  expm  function, an exact method for the  P  function may be optionally defined. This is highly recommended when it is possible, as it typically results in substantial computational savings.", 
            "title": "P matrix calculation for user defined substitution models"
        }
    ]
}